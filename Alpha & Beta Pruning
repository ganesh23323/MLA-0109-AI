import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board):
    for row in board:
        if all(cell == row[0] and cell != " " for cell in row):
            return row[0]
    for col in range(3):
        if all(board[row][col] == board[0][col] and board[row][col] != " " for row in range(3)):
            return board[0][col]
    if all(board[i][i] == board[0][0] and board[i][i] != " " for i in range(3)):
        return board[0][0]
    if all(board[i][2 - i] == board[0][2] and board[i][2 - i] != " " for i in range(3)):
        return board[0][2]
    return None

def is_board_full(board):
    return all(cell != " " for row in board for cell in row)

def get_empty_cells(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]

def alpha_beta(board, depth, alpha, beta, is_maximizing):
    if check_winner(board) == "X":
        return -10 + depth, None
    elif check_winner(board) == "O":
        return 10 - depth, None
    elif is_board_full(board):
        return 0, None

    if is_maximizing:
        max_eval = -math.inf
        best_move = None
        for i, j in get_empty_cells(board):
            board[i][j] = "O"
            eval, _ = alpha_beta(board, depth + 1, alpha, beta, False)
            board[i][j] = " "
            if eval > max_eval:
                max_eval = eval
                best_move = (i, j)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval, best_move
    else:
        min_eval = math.inf
        best_move = None
        for i, j in get_empty_cells(board):
            board[i][j] = "X"
            eval, _ = alpha_beta(board, depth + 1, alpha, beta, True)
            board[i][j] = " "
            if eval < min_eval:
                min_eval = eval
                best_move = (i, j)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval, best_move

def play_game():
    board = [[" "]*3 for _ in range(3)]

    while True:
        print_board(board)
        if check_winner(board):
            print(f"Player {check_winner(board)} wins!")
            break
        if is_board_full(board):
            print("It's a draw!")
            break

        player_row = int(input("Enter row number (0, 1, or 2): "))
        player_col = int(input("Enter column number (0, 1, or 2): "))
        if board[player_row][player_col] == " ":
            board[player_row][player_col] = "X"
        else:
            print("That cell is already taken. Try again.")
            continue

        if check_winner(board):
            print_board(board)
            print(f"Player {check_winner(board)} wins!")
            break
        if is_board_full(board):
            print_board(board)
            print("It's a draw!")
            break

        _, ai_move = alpha_beta(board, 0, -math.inf, math.inf, True)
        board[ai_move[0]][ai_move[1]] = "O"

if __name__ == "__main__":
    play_game()
