import itertools

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_board_full(board):
    return all(cell != " " for row in board for cell in row)

def get_winner(board):
    if check_winner(board, "X"):
        return "X"
    elif check_winner(board, "O"):
        return "O"
    else:
        return None

def get_empty_cells(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == " "]

def play_game():
    board = [[" "]*3 for _ in range(3)]
    players = itertools.cycle(["X", "O"])

    while True:
        print_board(board)
        current_player = next(players)
        print(f"Player {current_player}'s turn")

        empty_cells = get_empty_cells(board)
        if not empty_cells:
            print("It's a draw!")
            break

        while True:
            try:
                row = int(input("Enter row number (0, 1, or 2): "))
                col = int(input("Enter column number (0, 1, or 2): "))
                if (row, col) in empty_cells:
                    board[row][col] = current_player
                    break
                else:
                    print("That cell is already taken. Try again.")
            except ValueError:
                print("Invalid input. Please enter a number.")

        winner = get_winner(board)
        if winner:
            print_board(board)
            print(f"Player {winner} wins!")
            break

if __name__ == "__main__":
    play_game()
