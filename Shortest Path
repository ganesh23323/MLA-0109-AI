import itertools

def calculate_distance(route, distances):
    total_distance = 0
    for i in range(len(route) - 1):
        total_distance += distances[route[i]][route[i + 1]]
    total_distance += distances[route[-1]][route[0]]  # Return to the starting city
    return total_distance

def tsp(cities, distances):
    shortest_route = None
    shortest_distance = float('inf')

    # Generate all possible permutations of cities
    for perm in itertools.permutations(range(len(cities))):
        route = list(perm)
        distance = calculate_distance(route, distances)
        if distance < shortest_distance:
            shortest_distance = distance
            shortest_route = route

    return shortest_route, shortest_distance

def main():
    # Example input: cities and distances
    cities = ['A', 'B', 'C', 'D']
    distances = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]

    shortest_route, shortest_distance = tsp(cities, distances)

    # Output the result
    print("Shortest Route:", shortest_route)
    print("Shortest Distance:", shortest_distance)

if __name__ == "__main__":
    main()
output:
Shortest Route: [0, 1, 3, 2]
Shortest Distance: 80
