import random
def print_board(board):
    for row in board:
        print(" ".join(map(str, row)))
def is_valid_move(move, empty_position):
    row, col = empty_position
    return (
        (move == "UP" and row > 0) or
        (move == "DOWN" and row < 2) or
        (move == "LEFT" and col > 0) or
        (move == "RIGHT" and col < 2)
    )
def perform_move(board, move, empty_position):
    row, col = empty_position
    new_row, new_col = row, col
    if move == "UP":
        new_row -= 1
    elif move == "DOWN":
        new_row += 1
    elif move == "LEFT":
        new_col -= 1
    elif move == "RIGHT":
        new_col += 1

    board[row][col], board[new_row][new_col] = board[new_row][new_col], board[row][col]
    return (new_row, new_col)

def is_solved(board):
    return all(board[i][j] == i * 3 + j + 1 for i in range(3) for j in range(3))

def main():
    board = [[1, 2, 3], [4, 5, 6], [7, 8, None]]
    empty_position = (2, 2)

    # Shuffle the board
    moves = ["UP", "DOWN", "LEFT", "RIGHT"]
    for _ in range(100):
        possible_moves = [move for move in moves if is_valid_move(move, empty_position)]
        random_move = random.choice(possible_moves)
        empty_position = perform_move(board, random_move, empty_position)

    while not is_solved(board):
        print_board(board)
        move = input("Enter move (UP/DOWN/LEFT/RIGHT): ").upper()

        if move not in moves or not is_valid_move(move, empty_position):
            print("Invalid move. Try again.")
            continue

        empty_position = perform_move(board, move, empty_position)

    print("Congratulations! Puzzle solved.")

if __name__ == "__main__":
    main()


